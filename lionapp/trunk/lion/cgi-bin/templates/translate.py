#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
from os.path import getmtime, exists
import time
import types
import __builtin__
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import DummyTransaction
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xhtml import xhtml

##################################################
## MODULE CONSTANTS
try:
    True, False
except NameError:
    True, False = (1==1), (1==0)
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.0.1'
__CHEETAH_versionTuple__ = (2, 0, 1, 'final', 0)
__CHEETAH_genTime__ = 1211168791.973964
__CHEETAH_genTimestamp__ = 'Mon May 19 10:46:31 2008'
__CHEETAH_src__ = 'translate.tmpl'
__CHEETAH_srcLastModified__ = 'Sat May 17 12:31:22 2008'
__CHEETAH_docstring__ = 'Autogenerated by CHEETAH: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class translate(xhtml):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        xhtml.__init__(self, *args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def title(self, **KWS):



        ## CHEETAH: generated from #def title at line 17, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''AMIS translation for ''')
        _v = VFFSL(SL,"language",True) # '$language' on line 18, col 22
        if _v is not None: write(_filter(_v, rawExpr='$language')) # from line 18, col 22.
        write(''': ''')
        _v = VFFSL(SL,"section",True) # '$section' on line 18, col 33
        if _v is not None: write(_filter(_v, rawExpr='$section')) # from line 18, col 33.
        write(''' section
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 20, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write('''<h1>''')
        _v = VFFSL(SL,"title",True) # '$title' on line 21, col 5
        if _v is not None: write(_filter(_v, rawExpr='$title')) # from line 21, col 5.
        write('''</h1>
<div id="navigation">
\t<a href="../TranslateStrings?view=all">Translate strings</a> | 
\t<a href="../ChooseAccelerators?view=all">Assign keyboard shortcuts</a> | 
\t<a href="../ChooseMnemonics?view=all">Choose mnemonics</a> (single-letter shortcuts)
</div>

<div class="description">
\t<p>''')
        _v = VFFSL(SL,"about",True) # '$about' on line 29, col 5
        if _v is not None: write(_filter(_v, rawExpr='$about')) # from line 29, col 5.
        write('''</p>
\t<p>Showing ''')
        _v = VFFSL(SL,"view_description",True) # '$view_description' on line 30, col 13
        if _v is not None: write(_filter(_v, rawExpr='$view_description')) # from line 30, col 13.
        write(''' (''')
        _v = VFFSL(SL,"count",True) # '$count' on line 30, col 32
        if _v is not None: write(_filter(_v, rawExpr='$count')) # from line 30, col 32.
        write(''' items)</p>
</div>
<div>
    <form action="change_view" method="POST">
        <select name="viewfilter">
            <option value="all">all items</option>
            <option value="newtodo">all items marked new or to-do</option>
            <option value="new">all new items</option>
            <option value="todo">all to-do items</option>
        </select>
        <input type="submit" value="Change view" />
    </form>
</div>
<br/>

''')
        if VFFSL(SL,"check_conflict",True): # generated from line 45, col 1
            write('''<p>When you have finished with all items, be sure to press the <em>Check for Conflicts</em> button</p>
<form action="check_conflicts"><input type="submit" value="Check for conflicts"/></form>\t
<br/>
''')
        write('''
''')
        if (VFFSL(SL,"warning_links",True) != None and len(VFFSL(SL,"warning_links",True)) > 0) or (VFFSL(SL,"warning_message",True) != None and len(VFFSL(SL,"warning_message",True)) > 0): # generated from line 51, col 1
            write('''<div class="warning">
\t<h2>Warning!</h2>
''')
            if VFFSL(SL,"warning_links",True) != None and len(VFFSL(SL,"warning_links",True)) > 0: # generated from line 54, col 2
                write('''\t\t<h3>Conflicts found:</h3>
\t\t<ul>
''')
                for link in VFFSL(SL,"warning_links",True): # generated from line 57, col 3
                    write('''\t\t\t<li>There is a conflict in <a href="#''')
                    _v = VFFSL(SL,"link",True) # '$link' on line 58, col 41
                    if _v is not None: write(_filter(_v, rawExpr='$link')) # from line 58, col 41.
                    write('''">this group</a></li>
''')
                write('''\t\t</ul>
''')
            write('''
''')
            if VFFSL(SL,"warning_message",True) != None and len(VFFSL(SL,"warning_message",True)) > 0: # generated from line 63, col 2
                write('''\t\t<p>''')
                _v = VFFSL(SL,"warning_message",True) # '$warning_message' on line 64, col 6
                if _v is not None: write(_filter(_v, rawExpr='$warning_message')) # from line 64, col 6.
                write('''</p>
''')
            write('''</div>
''')
        write('''
''')
        if VFFSL(SL,"show_no_conflicts",True): # generated from line 69, col 1
            write('''<div class="message">
\t<p>No conflicts</p>
</div>
''')
        write('''
''')
        #  the big table
        write('''<div>''')
        _v = VFFSL(SL,"form",True) # '$form' on line 76, col 6
        if _v is not None: write(_filter(_v, rawExpr='$form')) # from line 76, col 6.
        write('''</div>

''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # Template variables:
        # 
        # 	actions = navigation links
        # 	about = about this page
        # 	view_description = about this page view
        # 	count = number of items being displayed
        # 	form = table rows, each containing a translation form
        # 	check_conflict = if True, the check conflict button will appear
        # 	warning_links = a list of links to go along with a warning
        # 	warning_message = a warning message
        # 	show_no_conflicts = if True, show a message area that says "no conflicts"
        write('''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_translate= 'writeBody'

## END CLASS DEFINITION

if not hasattr(translate, '_initCheetahAttributes'):
    templateAPIClass = getattr(translate, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(translate)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=translate()).run()


