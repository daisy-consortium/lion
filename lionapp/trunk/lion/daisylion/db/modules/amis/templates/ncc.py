#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
import daisylion.db.modules.amis.keys_book

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1348528239.1711
__CHEETAH_genTimestamp__ = 'Mon Sep 24 16:10:39 2012'
__CHEETAH_src__ = 'ncc.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Dec  8 06:01:44 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class ncc(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(ncc, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # 	$menus
        # 	$title_chapter
        # 	$langid
        # 	$organized_by_menu_chapter
        # 	$other_commands_chapter
        write(u'''<?xml version="1.0" encoding="utf-8"?>\r
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\r
<html xmlns="http://www.w3.org/1999/xhtml">\r
\t<head>\r
\t\t<title>''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[0],"caption.text",True) # u'$title_chapter[0].caption.text' on line 13, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[0].caption.text')) # from line 13, col 10.
        write(u'''</title>\r
\t\t<meta name="dc:title" content="''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[0],"caption.text",True) # u'$title_chapter[0].caption.text' on line 14, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[0].caption.text')) # from line 14, col 34.
        write(u'''"/>\r
\t\t<meta name="dc:creator" content="DAISY Lion"/>\r
\t\t<meta name="dc:date" content="2008-07-08" scheme="yyyy-mm-dd"/>\r
\t\t<meta name="dc:format" content="Daisy 2.02"/>\r
\t\t<meta name="dc:identifier" content="amis-keyboard-shortcuts-''')
        _v = VFFSL(SL,"langid",True) # u'$langid' on line 18, col 63
        if _v is not None: write(_filter(_v, rawExpr=u'$langid')) # from line 18, col 63.
        write(u'''"/>\r
\t\t<meta name="dc:language" content="en" scheme="ISO 639"/>\r
\t\t<meta name="dc:publisher" content="DAISY Consortium"/>\r
\t\t<meta name="ncc:depth" content="2"/>\r
\t\t<meta name="ncc:multimediaType" content="audioNcc"/>\r
\t\t<meta name="ncc:charset" content="utf-8"/>\r
\t\t<meta http-equiv="Content-type" content="text/html; charset=utf-8"/>\r
\t\t<meta name="ncc:tocItems" content="0"/>\r
\t</head>\r
\t<body dir="''')
        _v = VFFSL(SL,"dir",True) # u'$dir' on line 27, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$dir')) # from line 27, col 13.
        write(u'''">\r
\t\t\r
\t\t<h1 class="title" id="nav1">\r
\t\t\t<a href="1.smil#''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[0],"caption.id",True) # u'$title_chapter[0].caption.id' on line 30, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[0].caption.id')) # from line 30, col 20.
        write(u'''">''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[0],"caption.text",True) # u'$title_chapter[0].caption.text' on line 30, col 50
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[0].caption.text')) # from line 30, col 50.
        write(u'''</a>\r
\t\t</h1>\r
\t\t\r
\t\t<h1 id="nav2">\r
\t\t\t<a href="2.smil#''')
        _v = VFN(VFFSL(SL,"organized_by_menu_chapter",True)[0],"caption.id",True) # u'$organized_by_menu_chapter[0].caption.id' on line 34, col 20
        if _v is not None: write(_filter(_v, rawExpr=u'$organized_by_menu_chapter[0].caption.id')) # from line 34, col 20.
        write(u'''">''')
        _v = VFN(VFFSL(SL,"organized_by_menu_chapter",True)[0],"caption.text",True) # u'$organized_by_menu_chapter[0].caption.text' on line 34, col 62
        if _v is not None: write(_filter(_v, rawExpr=u'$organized_by_menu_chapter[0].caption.text')) # from line 34, col 62.
        write(u'''</a>\r
\t\t</h1>\r
\t\t\r
''')
        count = 3
        for menu in VFFSL(SL,"menus",True): # generated from line 38, col 3
            write(u'''\t\t\t<h2 id="nav''')
            _v = VFFSL(SL,"count",True) # u'$count' on line 39, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$count')) # from line 39, col 15.
            write(u'''">\r
\t\t\t\t<a href="''')
            _v = VFFSL(SL,"count",True) # u'${count}' on line 40, col 14
            if _v is not None: write(_filter(_v, rawExpr=u'${count}')) # from line 40, col 14.
            write(u'''.smil#''')
            _v = VFN(VFFSL(SL,"menu",True)[0],"caption.id",True) # u'$menu[0].caption.id' on line 40, col 28
            if _v is not None: write(_filter(_v, rawExpr=u'$menu[0].caption.id')) # from line 40, col 28.
            write(u'''">''')
            _v = VFN(VFFSL(SL,"menu",True)[0],"caption.text",True) # u'$menu[0].caption.text' on line 40, col 49
            if _v is not None: write(_filter(_v, rawExpr=u'$menu[0].caption.text')) # from line 40, col 49.
            write(u'''</a>\r
\t\t\t</h2>\r
''')
            count += 1
        write(u'''\t\t<h1 id="nav''')
        _v = VFFSL(SL,"count",True) # u'$count' on line 44, col 14
        if _v is not None: write(_filter(_v, rawExpr=u'$count')) # from line 44, col 14.
        write(u'''">\r
\t\t\t<a href="''')
        _v = VFFSL(SL,"count",True) # u'${count}' on line 45, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'${count}')) # from line 45, col 13.
        write(u'''.smil#''')
        _v = VFN(VFFSL(SL,"other_commands_chapter",True)[0],"caption.id",True) # u'$other_commands_chapter[0].caption.id' on line 45, col 27
        if _v is not None: write(_filter(_v, rawExpr=u'$other_commands_chapter[0].caption.id')) # from line 45, col 27.
        write(u'''">''')
        _v = VFN(VFFSL(SL,"other_commands_chapter",True)[0],"caption.text",True) # u'$other_commands_chapter[0].caption.text' on line 45, col 66
        if _v is not None: write(_filter(_v, rawExpr=u'$other_commands_chapter[0].caption.text')) # from line 45, col 66.
        write(u'''</a>\r
\t\t</h1>\r
\t\t\r
\t</body>\r
</html>\r
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_ncc= 'respond'

## END CLASS DEFINITION

if not hasattr(ncc, '_initCheetahAttributes'):
    templateAPIClass = getattr(ncc, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(ncc)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=ncc()).run()


