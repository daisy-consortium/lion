#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
import daisylion.db.modules.amis.keys_book

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1348528239.180433
__CHEETAH_genTimestamp__ = 'Mon Sep 24 16:10:39 2012'
__CHEETAH_src__ = 'smil.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Dec  8 06:01:44 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class smil(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(smil, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # 	$menuitems
        # 	$textfile
        # 	$title_text
        # 	$langid
        # 	$ownfilename
        write(u'''<?xml version="1.0" encoding="iso-8859-1"?>\r
<!DOCTYPE smil PUBLIC "-//W3C//DTD SMIL 1.0//EN" "http://www.w3.org/TR/REC-smil/SMIL10.dtd">\r
<smil>\r
\t<head>\r
\t\t<meta name="dc:format" content="Daisy 2.02"/>\r
\t\t<meta name="title" content="''')
        _v = VFFSL(SL,"title_text",True) # u'$title_text' on line 14, col 31
        if _v is not None: write(_filter(_v, rawExpr=u'$title_text')) # from line 14, col 31.
        write(u'''"/>\r
\t\t<meta name="dc:title" content="''')
        _v = VFFSL(SL,"title_text",True) # u'$title_text' on line 15, col 34
        if _v is not None: write(_filter(_v, rawExpr=u'$title_text')) # from line 15, col 34.
        write(u'''"/>\r
\t\t<layout>\r
\t\t\t<region id="txtView"/>\r
\t\t</layout>\r
\t\t<meta name="dc:identifier" content="amis-keyboard-shortcuts-''')
        _v = VFFSL(SL,"langid",True) # u'$langid' on line 19, col 63
        if _v is not None: write(_filter(_v, rawExpr=u'$langid')) # from line 19, col 63.
        write(u'''"/>\r
\t</head>\r
\t<body>\r
\t\t<seq>\r
''')
        count = 1
        for item in VFFSL(SL,"menuitems",True): # generated from line 24, col 4
            write(u'''\t\t\t\t<par endsync="last" id="''')
            _v = VFFSL(SL,"item.caption.id",True) # u'$item.caption.id' on line 25, col 29
            if _v is not None: write(_filter(_v, rawExpr=u'$item.caption.id')) # from line 25, col 29.
            write(u'''">\r
\t\t\t\t\t<text src="''')
            _v = VFFSL(SL,"textfile",True) # u'${textfile}' on line 26, col 17
            if _v is not None: write(_filter(_v, rawExpr=u'${textfile}')) # from line 26, col 17.
            write(u'''#''')
            _v = VFFSL(SL,"item.caption.id",True) # u'$item.caption.id' on line 26, col 29
            if _v is not None: write(_filter(_v, rawExpr=u'$item.caption.id')) # from line 26, col 29.
            write(u'''"/>\r
\t\t\t\t\t<audio src="''')
            _v = VFFSL(SL,"item.caption.audio",True) # u'$item.caption.audio' on line 27, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'$item.caption.audio')) # from line 27, col 18.
            write(u'''"/>\r
\t\t\t\t</par>\r
''')
            if VFFSL(SL,"item.shortcut",True) != None: # generated from line 29, col 5
                write(u'''\t\t\t\t\t<par endsync="last" id="''')
                _v = VFFSL(SL,"item.shortcut.id",True) # u'$item.shortcut.id' on line 30, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$item.shortcut.id')) # from line 30, col 30.
                write(u'''">\r
\t\t\t\t\t\t<text src="''')
                _v = VFFSL(SL,"textfile",True) # u'${textfile}' on line 31, col 18
                if _v is not None: write(_filter(_v, rawExpr=u'${textfile}')) # from line 31, col 18.
                write(u'''#''')
                _v = VFFSL(SL,"item.shortcut.id",True) # u'$item.shortcut.id' on line 31, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$item.shortcut.id')) # from line 31, col 30.
                write(u'''"/>\r
\t\t\t\t\t\t<audio src="''')
                _v = VFFSL(SL,"item.shortcut.audio",True) # u'$item.shortcut.audio' on line 32, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'$item.shortcut.audio')) # from line 32, col 19.
                write(u'''"/>\r
\t\t\t\t\t</par>\r
''')
            count = count + 1
        write(u'''\t\t</seq>\r
\t</body>\r
</smil>\r
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_smil= 'respond'

## END CLASS DEFINITION

if not hasattr(smil, '_initCheetahAttributes'):
    templateAPIClass = getattr(smil, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(smil)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=smil()).run()


