#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
import daisylion.db.modules.amis.keys_book

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1348528239.199602
__CHEETAH_genTimestamp__ = 'Mon Sep 24 16:10:39 2012'
__CHEETAH_src__ = 'xhtml_daisy_text.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Dec  8 06:01:44 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class xhtml_daisy_text(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(xhtml_daisy_text, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # 	$title_chapter
        # 	$langid
        # 	$menus
        # 	$organized_by_menu_chapter
        # 	$other_commands_chapter
        write(u'''<?xml version="1.0" encoding="utf-8"?>\r
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">\r
<html xml:lang="en" lang="en" xmlns="http://www.w3.org/1999/xhtml">\r
\t<head>\r
\t\t<title>''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[0],"caption.text",True) # u'$title_chapter[0].caption.text' on line 13, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[0].caption.text')) # from line 13, col 10.
        write(u'''</title>\r
\t\t<meta name="dc:identifier" content="amis-keyboard-shortcuts-''')
        _v = VFFSL(SL,"langid",True) # u'$langid' on line 14, col 63
        if _v is not None: write(_filter(_v, rawExpr=u'$langid')) # from line 14, col 63.
        write(u'''"/>\r
\t\t<link rel="stylesheet" type="text/css" href="style.css"/>\r
\t\t<meta name="ncc:charset" content="utf-8"/>\r
\t\t<meta http-equiv="Content-type" content="text/html; charset=utf-8"/>\r
\t</head>\r
\t<body dir="''')
        _v = VFFSL(SL,"dir",True) # u'$dir' on line 19, col 13
        if _v is not None: write(_filter(_v, rawExpr=u'$dir')) # from line 19, col 13.
        write(u'''">\r
\t\t<h1 class="title" id="''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[0],"caption.id",True) # u'$title_chapter[0].caption.id' on line 20, col 25
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[0].caption.id')) # from line 20, col 25.
        write(u'''">''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[0],"caption.text",True) # u'$title_chapter[0].caption.text' on line 20, col 55
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[0].caption.text')) # from line 20, col 55.
        write(u'''</h1>\r
\t\t<p id="''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[1],"caption.id",True) # u'$title_chapter[1].caption.id' on line 21, col 10
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[1].caption.id')) # from line 21, col 10.
        write(u'''">''')
        _v = VFN(VFFSL(SL,"title_chapter",True)[1],"caption.text",True) # u'$title_chapter[1].caption.text' on line 21, col 40
        if _v is not None: write(_filter(_v, rawExpr=u'$title_chapter[1].caption.text')) # from line 21, col 40.
        write(u'''</p>\r
\t\t\t\r
\t\t<h1 id="''')
        _v = VFN(VFFSL(SL,"organized_by_menu_chapter",True)[0],"caption.id",True) # u'$organized_by_menu_chapter[0].caption.id' on line 23, col 11
        if _v is not None: write(_filter(_v, rawExpr=u'$organized_by_menu_chapter[0].caption.id')) # from line 23, col 11.
        write(u'''">''')
        _v = VFN(VFFSL(SL,"organized_by_menu_chapter",True)[0],"caption.text",True) # u'$organized_by_menu_chapter[0].caption.text' on line 23, col 53
        if _v is not None: write(_filter(_v, rawExpr=u'$organized_by_menu_chapter[0].caption.text')) # from line 23, col 53.
        write(u'''</h1>\r
\t\t\r
''')
        for menu in VFFSL(SL,"menus",True): # generated from line 25, col 3
            first = True
            for menuitem in menu: # generated from line 27, col 4
                if VFFSL(SL,"first",True) == True: # generated from line 28, col 5
                    write(u'''\t\t\t\t\t<h2 id="''')
                    _v = VFFSL(SL,"menuitem.caption.id",True) # u'$menuitem.caption.id' on line 29, col 14
                    if _v is not None: write(_filter(_v, rawExpr=u'$menuitem.caption.id')) # from line 29, col 14.
                    write(u'''">''')
                    _v = VFFSL(SL,"menuitem.caption.text",True) # u'$menuitem.caption.text' on line 29, col 36
                    if _v is not None: write(_filter(_v, rawExpr=u'$menuitem.caption.text')) # from line 29, col 36.
                    write(u''' (''')
                    _v = VFFSL(SL,"menuitem.shortcut.text",True) # u'$menuitem.shortcut.text' on line 29, col 60
                    if _v is not None: write(_filter(_v, rawExpr=u'$menuitem.shortcut.text')) # from line 29, col 60.
                    write(u''')</h2>\r
\t\t\t\t\t<ul>\r
''')
                    first = False
                else: # generated from line 32, col 5
                    write(u'''\t\t\t\t\t<li>\r
\t\t\t\t\t\t<span id="''')
                    _v = VFFSL(SL,"menuitem.caption.id",True) # u'$menuitem.caption.id' on line 34, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'$menuitem.caption.id')) # from line 34, col 17.
                    write(u'''">''')
                    _v = VFFSL(SL,"menuitem.caption.text",True) # u'$menuitem.caption.text' on line 34, col 39
                    if _v is not None: write(_filter(_v, rawExpr=u'$menuitem.caption.text')) # from line 34, col 39.
                    write(u''':</span>\r
\t\t\t\t\t\t<span id="''')
                    _v = VFFSL(SL,"menuitem.shortcut.id",True) # u'$menuitem.shortcut.id' on line 35, col 17
                    if _v is not None: write(_filter(_v, rawExpr=u'$menuitem.shortcut.id')) # from line 35, col 17.
                    write(u'''">''')
                    _v = VFFSL(SL,"menuitem.shortcut.text",True) # u'$menuitem.shortcut.text' on line 35, col 40
                    if _v is not None: write(_filter(_v, rawExpr=u'$menuitem.shortcut.text')) # from line 35, col 40.
                    write(u'''</span>\r
\t\t\t\t\t</li>\r
''')
            write(u'''\t\t\t</ul>\r
''')
        write(u'''\t\t\r
''')
        first = True
        for item in VFFSL(SL,"other_commands_chapter",True): # generated from line 43, col 3
            if VFFSL(SL,"first",True) == True: # generated from line 44, col 4
                write(u'''\t\t\t\t<h1 id="''')
                _v = VFFSL(SL,"item.caption.id",True) # u'$item.caption.id' on line 45, col 13
                if _v is not None: write(_filter(_v, rawExpr=u'$item.caption.id')) # from line 45, col 13.
                write(u'''">''')
                _v = VFFSL(SL,"item.caption.text",True) # u'$item.caption.text' on line 45, col 31
                if _v is not None: write(_filter(_v, rawExpr=u'$item.caption.text')) # from line 45, col 31.
                write(u'''</h1>\r
\t\t\t\t<ul>\r
''')
                first = False
            else: # generated from line 48, col 4
                write(u'''\t\t\t\t<li>\r
\t\t\t\t\t<span id="''')
                _v = VFFSL(SL,"item.caption.id",True) # u'$item.caption.id' on line 50, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'$item.caption.id')) # from line 50, col 16.
                write(u'''">''')
                _v = VFFSL(SL,"item.caption.text",True) # u'$item.caption.text' on line 50, col 34
                if _v is not None: write(_filter(_v, rawExpr=u'$item.caption.text')) # from line 50, col 34.
                write(u''':</span>\r
\t\t\t\t\t<span id="''')
                _v = VFFSL(SL,"item.shortcut.id",True) # u'$item.shortcut.id' on line 51, col 16
                if _v is not None: write(_filter(_v, rawExpr=u'$item.shortcut.id')) # from line 51, col 16.
                write(u'''">''')
                _v = VFFSL(SL,"item.shortcut.text",True) # u'$item.shortcut.text' on line 51, col 35
                if _v is not None: write(_filter(_v, rawExpr=u'$item.shortcut.text')) # from line 51, col 35.
                write(u'''</span>\r
\t\t\t\t</li>\r
''')
        write(u'''\t\t</ul>\t\r
\t</body>\r
</html>\r
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_xhtml_daisy_text= 'respond'

## END CLASS DEFINITION

if not hasattr(xhtml_daisy_text, '_initCheetahAttributes'):
    templateAPIClass = getattr(xhtml_daisy_text, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(xhtml_daisy_text)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=xhtml_daisy_text()).run()


