# run this to generate the 3 configuration file options for the lion
from optparse import OptionParser
import time

COMMENT = """# daisylion configuration file
# generated by generate_config.py
# app = %s, config = %s
# %s
"""

STATIC_MAIN_SECTION = """
[main]
masterlang=eng-US
trace=true
audio_dir_prefix=./audio/
"""

DYNAMIC_APP_SECTION = {
"amis": 
"""show_audio_upload=true
dbname=amislion
target_app=amis
""",

"obi": 
"""show_audio_upload=false
dbname=obi_resx
target_app=obi
"""
}

DYNAMIC_SERVER_SECTION = {
"local": """# site and db are local
dbhost=localhost
webhost=localhost
webport=8080
temp_audio_dir=/tmp/daisylionaudio
temp_audio_uri=file:///tmp/daisylionaudio
""",

"web": """# site and db are on gandi (92.243.13.151)
dbhost=localhost
webhost=92.243.13.151
webport=8080
temp_audio_dir=/srv/d_daisylion/www/www.example.net/htdocs/daisylionaudio
temp_audio_uri=http://92.243.13.151/daisylionaudio
""",

"combo":"""# site is local and db is on gandi (92.243.13.151).  requires that your IP is authorized on the remote mysql server.
dbhost=92.243.13.151
webhost=localhost
webport=8080
temp_audio_dir=/tmp/daisylionaudio
temp_audio_uri=file:///tmp/daisylionaudio
"""   
}

STATIC_MODULE_SECTION="""
# each module has its own section
[amis]
lioniomodule=lionio_amis
lionioclass=AmisLionIO

[obi]
lioniomodule=lionio_obi
lionioclass=ObiLionIO
"""

def assemble_file(app, config):
    return (COMMENT % (app, config, time.asctime())) + STATIC_MAIN_SECTION + \
        DYNAMIC_APP_SECTION[app] + DYNAMIC_SERVER_SECTION[config] + STATIC_MODULE_SECTION

def main():
    usage = """usage: %prog [options] app configuration
    app = amis | obi
    configuration = local | web | combo
    """
    parser = OptionParser(usage)
    (options, args) = parser.parse_args()
    if len(args) < 2:
        print "Must give the application name and the configuration"
        sys.exit(1)
    if args[0] not in ("amis", "obi"):
        print "Unrecognized application"
        sys.exit(1)
    if args[1] not in ("local", "web", "combo"):
        print "Unrecognized configuration"
        sys.exit(1)
    
    output = assemble_file(args[0], args[1])
    print output

if __name__ == "__main__": main()
