#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1348528239.711894
__CHEETAH_genTimestamp__ = 'Mon Sep 24 16:10:39 2012'
__CHEETAH_src__ = 'xhtml.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Dec  8 06:01:44 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class xhtml(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(xhtml, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def host(self, **KWS):



        ## CHEETAH: generated from #def host at line 7, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def port(self, **KWS):



        ## CHEETAH: generated from #def port at line 9, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def targetid(self, **KWS):



        ## CHEETAH: generated from #def targetid at line 15, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def appname(self, **KWS):



        ## CHEETAH: generated from #def appname at line 17, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def applogo(self, **KWS):



        ## CHEETAH: generated from #def applogo at line 19, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def redirect_url(self, **KWS):



        ## CHEETAH: generated from #def redirect_url at line 21, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # Template variables:
        # 	title = page title
        # 	body = page body
        # 	host = the host
        base_url = "http://" + VFFSL(SL,"host",True) + ":" + str(VFFSL(SL,"port",True)) + "/style/"
        css = VFFSL(SL,"base_url",True) + "l10n.css"
        icon = VFFSL(SL,"base_url",True) + "lionicon.ico"
        logo = VFFSL(SL,"base_url",True) + "lion144.png"
        write(u'''<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" lang="en" xmlns="http://www.w3.org/1999/xhtml">
\t<head>
    \t<title>The DAISY Lion
''')
        if VFFSL(SL,"appname",True) != None and VFFSL(SL,"appname",True) != "": # generated from line 29, col 3
            write(u'''\t\t\tfor ''')
            _v = VFFSL(SL,"appname",True) # u'$appname' on line 30, col 8
            if _v is not None: write(_filter(_v, rawExpr=u'$appname')) # from line 30, col 8.
            write(u'''
''')
        write(u'''\t\t- ''')
        _v = VFFSL(SL,"title",True) # u'$title' on line 32, col 5
        if _v is not None: write(_filter(_v, rawExpr=u'$title')) # from line 32, col 5.
        write(u'''</title>
    \t<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
''')
        if VFFSL(SL,"redirect_url",True) != None and VFFSL(SL,"redirect_url",True) != "": # generated from line 34, col 3
            write(u'''\t\t\t<meta http-equiv="refresh" content="0; url=''')
            _v = VFFSL(SL,"redirect_url",True) # u'$redirect_url' on line 35, col 47
            if _v is not None: write(_filter(_v, rawExpr=u'$redirect_url')) # from line 35, col 47.
            write(u'''"/>
''')
        write(u'''    \t<link href="''')
        _v = VFFSL(SL,"css",True) # u'$css' on line 37, col 18
        if _v is not None: write(_filter(_v, rawExpr=u'$css')) # from line 37, col 18.
        write(u'''" rel="stylesheet" type="text/css"/>
\t\t<link rel="icon" href="''')
        _v = VFFSL(SL,"icon",True) # u'$icon' on line 38, col 26
        if _v is not None: write(_filter(_v, rawExpr=u'$icon')) # from line 38, col 26.
        write(u'''"/>
\t\t<script language="javascript">
\t\t\tfunction scroll()
\t\t\t{
\t\t\t\tvar the_id = "''')
        _v = VFFSL(SL,"targetid",True) # u'$targetid' on line 42, col 19
        if _v is not None: write(_filter(_v, rawExpr=u'$targetid')) # from line 42, col 19.
        write(u'''";
\t\t\t\tif (the_id.length > 0)
\t\t\t\t\twindow.location.hash = the_id;
\t\t\t}
\t\t</script>
  \t</head>
  \t<body onload="scroll()">
  \t\t<div id="header">
      <div id="header_left">
        <h1>The DAISY Lion</h1>
        <p>Web-based localization system</p>
      </div>
\t\t\t<div id="header_images">
''')
        if VFFSL(SL,"applogo",True) != None and VFFSL(SL,"applogo",True) != "": # generated from line 55, col 5
            write(u'''\t\t\t\t<img src="''')
            _v = VFFSL(SL,"applogo",True) # u'$applogo' on line 56, col 15
            if _v is not None: write(_filter(_v, rawExpr=u'$applogo')) # from line 56, col 15.
            write(u'''" alt="logo for ''')
            _v = VFFSL(SL,"appname",True) # u'$appname' on line 56, col 39
            if _v is not None: write(_filter(_v, rawExpr=u'$appname')) # from line 56, col 39.
            write(u'''"/>
''')
        write(u'''\t\t\t\t<img src="''')
        _v = VFFSL(SL,"logo",True) # u'$logo' on line 58, col 15
        if _v is not None: write(_filter(_v, rawExpr=u'$logo')) # from line 58, col 15.
        write(u'''" alt="logo for the DAISY Lion"/>
\t\t\t</div>
\t\t</div>
    <div id="clear"/>
\t\t''')
        _v = VFFSL(SL,"body",True) # u'$body' on line 62, col 3
        if _v is not None: write(_filter(_v, rawExpr=u'$body')) # from line 62, col 3.
        write(u'''
\t</body>
</html>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_xhtml= 'respond'

## END CLASS DEFINITION

if not hasattr(xhtml, '_initCheetahAttributes'):
    templateAPIClass = getattr(xhtml, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(xhtml)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=xhtml()).run()


