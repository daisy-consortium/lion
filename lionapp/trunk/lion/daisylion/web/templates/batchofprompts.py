#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers
from xhtml import xhtml

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1348528239.602313
__CHEETAH_genTimestamp__ = 'Mon Sep 24 16:10:39 2012'
__CHEETAH_src__ = 'batchofprompts.tmpl'
__CHEETAH_srcLastModified__ = 'Thu Dec  8 06:01:44 2011'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class batchofprompts(xhtml):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(batchofprompts, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def title(self, **KWS):



        ## CHEETAH: generated from #def title at line 10, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def body(self, **KWS):



        ## CHEETAH: generated from #def body at line 13, col 1.
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<h1>Prompts</h1>
<p>After you\'ve translated all the items, you can choose to record them all at once and upload them here.  This can be easier than uploading an individual file for each prompt if you have a lot to upload.  Typically, you only need to do this batch upload of prompts if you are recording your entire translation for the first time.</p>

<h2>Get Obi</h2>
<p>Obi is the name of the recording tool you will use to do the recording.  You can <a href="http://www.daisy.org/obi/">download Obi</a> here.</p>

<h2>Get your prompts</h2>
<p>Click the link to see all your prompts. Save the page to your hard drive.</p>

<form action="generate_prompts" method="POST" enctype="multipart/form-data">
<input type="Submit" value="Generate prompts"/>
</form>

<h2 id="create_obi_projects">Create an Obi project</h2>

<p>You now have an HTML file with all of your prompts.  Find where you saved it in the previous step.</p>
    
<ul>
    <li>Start Obi</li>
    <li>Create a new project by importing a file</li>
    <li>Choose one file (e.g. "amis_prompts.html") as your import file.</li>
    <li>You should see all your prompts on the screen, each as a section heading.</li>
    <li>Go under "View" and uncheck "Wrapping in Content View".  This will improve Obi\'s performance in this particular case.</li>
    <li>Record audio for each prompt. Check your work as you go.  It is better to go slowly and leave some silence around each audio clip.  We can trim it for you as part of the post-processing.</li>
    <li>As you record, you can press H to go to the next section and continue recording.  However, when you reach then end of your sections list, if you press H, Obi will start creating sections called "Untitled Section".  Simply delete any "Untitled Section" entries.  It is important that there are no extra sections and no missing sections.</li>
</ul>

<h2>Prepare your project</h2>
<p>Perform these actions from Obi and accept the default options:</p>
<ul>
\t<li>Under the &quot;Tools&quot; menu, select &quot;Export as DAISY&quot;</li>
\t<li>Under the &quot;Tools&quot; menu, select &quot;Convert audio to MP3&quot;
</ul>
<p>Then exit Obi. Find your project folder and look for a subfolder called &quot;MP3 Export&quot;.  Create a zip of that folder.</p>

<h2>Upload your file</h2>
<p>Upload your project as a zipped file.  Please remain on this page until your upload has completed.</p>
<p>NOTE: this is not for uploading your user guide translation.  This is only for uploading your Obi project export containing all of your prompts.</p>
<form action="upload_zipfile_of_prompts" method="POST" enctype="multipart/form-data">
<input type="file" name="infile" value="Browse"/>
<input type="Submit" value="Upload"/>
</form>



<p><a href="../MainMenu">Back to the main menu</a></p>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        

    def writeBody(self, **KWS):



        ## CHEETAH: main method generated for this template
        trans = KWS.get("trans")
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        # 
        # Template variables:
        # 	user = user's real name
        # 	language = language name
        # 	actions = list of menu links
        write(u'''
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_batchofprompts= 'writeBody'

## END CLASS DEFINITION

if not hasattr(batchofprompts, '_initCheetahAttributes'):
    templateAPIClass = getattr(batchofprompts, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(batchofprompts)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=batchofprompts()).run()


